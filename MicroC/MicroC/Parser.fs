// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Domain

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | TRUE
  | FALSE
  | INT
  | IF
  | ELSE
  | WHILE
  | CONTINUE
  | BREAK
  | WRITE
  | READ
  | PLUS
  | MINUS
  | MUL
  | DIV
  | GT
  | GE
  | LT
  | LE
  | EQ
  | NEQ
  | NOT
  | ASSIGN
  | SEMI
  | AND
  | OR
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | ID of (string)
  | INTEGER of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_INT
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_CONTINUE
    | TOKEN_BREAK
    | TOKEN_WRITE
    | TOKEN_READ
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_NOT
    | TOKEN_ASSIGN
    | TOKEN_SEMI
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_ID
    | TOKEN_INTEGER
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM__startProg
    | NONTERM_Main
    | NONTERM_Prog
    | NONTERM_BasicDecl
    | NONTERM_Decl
    | NONTERM_Stmt
    | NONTERM_BasicStmt
    | NONTERM_Aexpr
    | NONTERM_Aexpr1
    | NONTERM_Aexpr2
    | NONTERM_Aexpr3
    | NONTERM_Bexpr
    | NONTERM_Bexpr1

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | TRUE  -> 1 
  | FALSE  -> 2 
  | INT  -> 3 
  | IF  -> 4 
  | ELSE  -> 5 
  | WHILE  -> 6 
  | CONTINUE  -> 7 
  | BREAK  -> 8 
  | WRITE  -> 9 
  | READ  -> 10 
  | PLUS  -> 11 
  | MINUS  -> 12 
  | MUL  -> 13 
  | DIV  -> 14 
  | GT  -> 15 
  | GE  -> 16 
  | LT  -> 17 
  | LE  -> 18 
  | EQ  -> 19 
  | NEQ  -> 20 
  | NOT  -> 21 
  | ASSIGN  -> 22 
  | SEMI  -> 23 
  | AND  -> 24 
  | OR  -> 25 
  | LPAREN  -> 26 
  | RPAREN  -> 27 
  | LBRACE  -> 28 
  | RBRACE  -> 29 
  | LBRACKET  -> 30 
  | RBRACKET  -> 31 
  | ID _ -> 32 
  | INTEGER _ -> 33 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_TRUE 
  | 2 -> TOKEN_FALSE 
  | 3 -> TOKEN_INT 
  | 4 -> TOKEN_IF 
  | 5 -> TOKEN_ELSE 
  | 6 -> TOKEN_WHILE 
  | 7 -> TOKEN_CONTINUE 
  | 8 -> TOKEN_BREAK 
  | 9 -> TOKEN_WRITE 
  | 10 -> TOKEN_READ 
  | 11 -> TOKEN_PLUS 
  | 12 -> TOKEN_MINUS 
  | 13 -> TOKEN_MUL 
  | 14 -> TOKEN_DIV 
  | 15 -> TOKEN_GT 
  | 16 -> TOKEN_GE 
  | 17 -> TOKEN_LT 
  | 18 -> TOKEN_LE 
  | 19 -> TOKEN_EQ 
  | 20 -> TOKEN_NEQ 
  | 21 -> TOKEN_NOT 
  | 22 -> TOKEN_ASSIGN 
  | 23 -> TOKEN_SEMI 
  | 24 -> TOKEN_AND 
  | 25 -> TOKEN_OR 
  | 26 -> TOKEN_LPAREN 
  | 27 -> TOKEN_RPAREN 
  | 28 -> TOKEN_LBRACE 
  | 29 -> TOKEN_RBRACE 
  | 30 -> TOKEN_LBRACKET 
  | 31 -> TOKEN_RBRACKET 
  | 32 -> TOKEN_ID 
  | 33 -> TOKEN_INTEGER 
  | 36 -> TOKEN_end_of_input
  | 34 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM__startProg 
    | 2 -> NONTERM_Main 
    | 3 -> NONTERM_Prog 
    | 4 -> NONTERM_BasicDecl 
    | 5 -> NONTERM_BasicDecl 
    | 6 -> NONTERM_BasicDecl 
    | 7 -> NONTERM_Decl 
    | 8 -> NONTERM_Decl 
    | 9 -> NONTERM_Stmt 
    | 10 -> NONTERM_Stmt 
    | 11 -> NONTERM_BasicStmt 
    | 12 -> NONTERM_BasicStmt 
    | 13 -> NONTERM_BasicStmt 
    | 14 -> NONTERM_BasicStmt 
    | 15 -> NONTERM_BasicStmt 
    | 16 -> NONTERM_BasicStmt 
    | 17 -> NONTERM_BasicStmt 
    | 18 -> NONTERM_BasicStmt 
    | 19 -> NONTERM_BasicStmt 
    | 20 -> NONTERM_BasicStmt 
    | 21 -> NONTERM_BasicStmt 
    | 22 -> NONTERM_Aexpr 
    | 23 -> NONTERM_Aexpr 
    | 24 -> NONTERM_Aexpr 
    | 25 -> NONTERM_Aexpr1 
    | 26 -> NONTERM_Aexpr1 
    | 27 -> NONTERM_Aexpr1 
    | 28 -> NONTERM_Aexpr2 
    | 29 -> NONTERM_Aexpr2 
    | 30 -> NONTERM_Aexpr3 
    | 31 -> NONTERM_Aexpr3 
    | 32 -> NONTERM_Aexpr3 
    | 33 -> NONTERM_Bexpr 
    | 34 -> NONTERM_Bexpr 
    | 35 -> NONTERM_Bexpr 
    | 36 -> NONTERM_Bexpr1 
    | 37 -> NONTERM_Bexpr1 
    | 38 -> NONTERM_Bexpr1 
    | 39 -> NONTERM_Bexpr1 
    | 40 -> NONTERM_Bexpr1 
    | 41 -> NONTERM_Bexpr1 
    | 42 -> NONTERM_Bexpr1 
    | 43 -> NONTERM_Bexpr1 
    | 44 -> NONTERM_Bexpr1 
    | 45 -> NONTERM_Bexpr1 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 36 
let _fsyacc_tagOfErrorTerminal = 34

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | INT  -> "INT" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | CONTINUE  -> "CONTINUE" 
  | BREAK  -> "BREAK" 
  | WRITE  -> "WRITE" 
  | READ  -> "READ" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MUL  -> "MUL" 
  | DIV  -> "DIV" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | NOT  -> "NOT" 
  | ASSIGN  -> "ASSIGN" 
  | SEMI  -> "SEMI" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | ID _ -> "ID" 
  | INTEGER _ -> "INTEGER" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | CONTINUE  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | WRITE  -> (null : System.Object) 
  | READ  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INTEGER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 4us; 2us; 3us; 3us; 65535us; 6us; 15us; 18us; 19us; 64us; 15us; 2us; 65535us; 6us; 7us; 64us; 17us; 2us; 65535us; 7us; 8us; 17us; 22us; 7us; 65535us; 7us; 21us; 8us; 23us; 17us; 21us; 22us; 23us; 50us; 51us; 54us; 55us; 61us; 62us; 21us; 65535us; 12us; 13us; 25us; 26us; 28us; 29us; 31us; 32us; 39us; 40us; 43us; 44us; 47us; 93us; 58us; 93us; 67us; 68us; 69us; 70us; 80us; 81us; 86us; 93us; 88us; 93us; 94us; 95us; 96us; 97us; 98us; 99us; 100us; 101us; 102us; 103us; 104us; 105us; 106us; 93us; 107us; 93us; 23us; 65535us; 12us; 66us; 25us; 66us; 28us; 66us; 31us; 66us; 39us; 66us; 43us; 66us; 47us; 66us; 58us; 66us; 67us; 66us; 69us; 66us; 72us; 73us; 74us; 75us; 80us; 66us; 86us; 66us; 88us; 66us; 94us; 66us; 96us; 66us; 98us; 66us; 100us; 66us; 102us; 66us; 104us; 66us; 106us; 66us; 107us; 66us; 23us; 65535us; 12us; 71us; 25us; 71us; 28us; 71us; 31us; 71us; 39us; 71us; 43us; 71us; 47us; 71us; 58us; 71us; 67us; 71us; 69us; 71us; 72us; 71us; 74us; 71us; 80us; 71us; 86us; 71us; 88us; 71us; 94us; 71us; 96us; 71us; 98us; 71us; 100us; 71us; 102us; 71us; 104us; 71us; 106us; 71us; 107us; 71us; 24us; 65535us; 12us; 78us; 25us; 78us; 28us; 78us; 31us; 78us; 39us; 78us; 43us; 78us; 47us; 78us; 58us; 78us; 67us; 78us; 69us; 78us; 72us; 78us; 74us; 78us; 76us; 77us; 80us; 78us; 86us; 78us; 88us; 78us; 94us; 78us; 96us; 78us; 98us; 78us; 100us; 78us; 102us; 78us; 104us; 78us; 106us; 78us; 107us; 78us; 4us; 65535us; 47us; 48us; 58us; 59us; 106us; 84us; 107us; 85us; 6us; 65535us; 47us; 90us; 58us; 90us; 86us; 87us; 88us; 89us; 106us; 90us; 107us; 90us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 4us; 7us; 11us; 14us; 17us; 25us; 47us; 71us; 95us; 120us; 125us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 3us; 2us; 3us; 8us; 2us; 3us; 10us; 1us; 3us; 2us; 4us; 5us; 2us; 4us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 7us; 1us; 7us; 2us; 8us; 21us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 2us; 10us; 21us; 1us; 10us; 2us; 11us; 12us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 14us; 2us; 15us; 16us; 2us; 15us; 16us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 17us; 2us; 18us; 19us; 2us; 18us; 19us; 4us; 18us; 19us; 33us; 34us; 2us; 18us; 19us; 2us; 18us; 19us; 2us; 18us; 19us; 2us; 18us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 3us; 20us; 33us; 34us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 3us; 22us; 23us; 24us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 3us; 25us; 26us; 27us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 28us; 1us; 28us; 1us; 29us; 2us; 30us; 31us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 32us; 3us; 33us; 34us; 44us; 3us; 33us; 34us; 45us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 6us; 38us; 39us; 40us; 41us; 42us; 43us; 1us; 38us; 1us; 38us; 1us; 39us; 1us; 39us; 1us; 40us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 45us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 17us; 20us; 22us; 25us; 28us; 30us; 32us; 34us; 36us; 38us; 41us; 43us; 45us; 47us; 49us; 52us; 54us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 79us; 82us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 104us; 107us; 112us; 115us; 118us; 121us; 124us; 126us; 128us; 130us; 132us; 134us; 136us; 140us; 142us; 144us; 146us; 148us; 150us; 152us; 156us; 158us; 160us; 162us; 164us; 168us; 170us; 172us; 174us; 176us; 178us; 180us; 182us; 185us; 187us; 189us; 191us; 193us; 197us; 201us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 222us; 224us; 226us; 228us; 230us; 232us; 234us; 236us; 238us; 240us; 242us; 244us; 246us; 248us; 250us; |]
let _fsyacc_action_rows = 109
let _fsyacc_actionTableElements = [|1us; 32768us; 28us; 6us; 0us; 49152us; 1us; 32768us; 28us; 6us; 0us; 49152us; 1us; 32768us; 0us; 5us; 0us; 16386us; 1us; 16390us; 3us; 10us; 9us; 32768us; 4us; 46us; 6us; 57us; 7us; 34us; 8us; 35us; 9us; 43us; 10us; 36us; 23us; 18us; 28us; 64us; 32us; 24us; 9us; 32768us; 4us; 46us; 6us; 57us; 7us; 34us; 8us; 35us; 9us; 43us; 10us; 36us; 28us; 64us; 29us; 9us; 32us; 24us; 0us; 16387us; 1us; 32768us; 32us; 11us; 1us; 16388us; 30us; 12us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 1us; 32768us; 31us; 14us; 0us; 16389us; 1us; 32768us; 23us; 16us; 0us; 16391us; 9us; 32768us; 4us; 46us; 6us; 57us; 7us; 34us; 8us; 35us; 9us; 43us; 10us; 36us; 23us; 18us; 28us; 64us; 32us; 24us; 1us; 16390us; 3us; 10us; 1us; 32768us; 23us; 20us; 0us; 16392us; 0us; 16393us; 9us; 32768us; 4us; 46us; 6us; 57us; 7us; 34us; 8us; 35us; 9us; 43us; 10us; 36us; 28us; 64us; 29us; 65us; 32us; 24us; 0us; 16394us; 2us; 32768us; 22us; 25us; 30us; 28us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 1us; 32768us; 23us; 27us; 0us; 16395us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 1us; 32768us; 31us; 30us; 1us; 32768us; 22us; 31us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 1us; 32768us; 23us; 33us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 1us; 32768us; 32us; 37us; 2us; 32768us; 23us; 38us; 30us; 39us; 0us; 16399us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 1us; 32768us; 31us; 41us; 1us; 32768us; 23us; 42us; 0us; 16400us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 1us; 32768us; 23us; 45us; 0us; 16401us; 1us; 32768us; 26us; 47us; 7us; 32768us; 1us; 91us; 2us; 92us; 12us; 76us; 21us; 106us; 26us; 107us; 32us; 79us; 33us; 83us; 3us; 32768us; 24us; 86us; 25us; 88us; 27us; 49us; 1us; 32768us; 28us; 50us; 8us; 32768us; 4us; 46us; 6us; 57us; 7us; 34us; 8us; 35us; 9us; 43us; 10us; 36us; 28us; 64us; 32us; 24us; 1us; 32768us; 29us; 52us; 1us; 16402us; 5us; 53us; 1us; 32768us; 28us; 54us; 8us; 32768us; 4us; 46us; 6us; 57us; 7us; 34us; 8us; 35us; 9us; 43us; 10us; 36us; 28us; 64us; 32us; 24us; 1us; 32768us; 29us; 56us; 0us; 16403us; 1us; 32768us; 26us; 58us; 7us; 32768us; 1us; 91us; 2us; 92us; 12us; 76us; 21us; 106us; 26us; 107us; 32us; 79us; 33us; 83us; 3us; 32768us; 24us; 86us; 25us; 88us; 27us; 60us; 1us; 32768us; 28us; 61us; 8us; 32768us; 4us; 46us; 6us; 57us; 7us; 34us; 8us; 35us; 9us; 43us; 10us; 36us; 28us; 64us; 32us; 24us; 1us; 32768us; 29us; 63us; 0us; 16404us; 1us; 16390us; 3us; 10us; 0us; 16405us; 2us; 16408us; 11us; 67us; 12us; 69us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 0us; 16406us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 0us; 16407us; 2us; 16411us; 13us; 72us; 14us; 74us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 0us; 16409us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 0us; 16410us; 2us; 32768us; 32us; 79us; 33us; 83us; 0us; 16412us; 0us; 16413us; 1us; 16415us; 30us; 80us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 1us; 32768us; 31us; 82us; 0us; 16414us; 0us; 16416us; 0us; 16428us; 3us; 32768us; 24us; 86us; 25us; 88us; 27us; 108us; 7us; 32768us; 1us; 91us; 2us; 92us; 12us; 76us; 21us; 106us; 26us; 107us; 32us; 79us; 33us; 83us; 0us; 16417us; 7us; 32768us; 1us; 91us; 2us; 92us; 12us; 76us; 21us; 106us; 26us; 107us; 32us; 79us; 33us; 83us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 6us; 32768us; 15us; 94us; 16us; 96us; 17us; 98us; 18us; 100us; 19us; 102us; 20us; 104us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 0us; 16422us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 0us; 16423us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 0us; 16424us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 0us; 16425us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 0us; 16426us; 3us; 32768us; 12us; 76us; 32us; 79us; 33us; 83us; 0us; 16427us; 7us; 32768us; 1us; 91us; 2us; 92us; 12us; 76us; 21us; 106us; 26us; 107us; 32us; 79us; 33us; 83us; 7us; 32768us; 1us; 91us; 2us; 92us; 12us; 76us; 21us; 106us; 26us; 107us; 32us; 79us; 33us; 83us; 0us; 16429us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 8us; 9us; 11us; 21us; 31us; 32us; 34us; 36us; 40us; 42us; 43us; 45us; 46us; 56us; 58us; 60us; 61us; 62us; 72us; 73us; 76us; 80us; 82us; 83us; 87us; 89us; 91us; 95us; 97us; 98us; 99us; 100us; 102us; 105us; 106us; 110us; 112us; 114us; 115us; 119us; 121us; 122us; 124us; 132us; 136us; 138us; 147us; 149us; 151us; 153us; 162us; 164us; 165us; 167us; 175us; 179us; 181us; 190us; 192us; 193us; 195us; 196us; 199us; 203us; 204us; 208us; 209us; 212us; 216us; 217us; 221us; 222us; 225us; 226us; 227us; 229us; 233us; 235us; 236us; 237us; 238us; 242us; 250us; 251us; 259us; 260us; 261us; 262us; 263us; 270us; 274us; 275us; 279us; 280us; 284us; 285us; 289us; 290us; 294us; 295us; 299us; 300us; 308us; 316us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 4us; 2us; 5us; 0us; 2us; 4us; 1us; 2us; 4us; 7us; 1us; 1us; 3us; 6us; 3us; 7us; 11us; 7us; 4us; 3us; 3us; 1us; 3us; 3us; 1us; 2us; 1us; 4us; 1us; 1us; 3us; 3us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 8us; 9us; 9us; 9us; 10us; 10us; 11us; 11us; 11us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 65535us; 16386us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 16391us; 65535us; 65535us; 65535us; 16392us; 16393us; 65535us; 16394us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 16397us; 16398us; 65535us; 65535us; 16399us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 16405us; 65535us; 65535us; 16406us; 65535us; 16407us; 65535us; 65535us; 16409us; 65535us; 16410us; 65535us; 16412us; 16413us; 65535us; 65535us; 65535us; 16414us; 16416us; 65535us; 65535us; 65535us; 16417us; 65535us; 16418us; 16419us; 16420us; 16421us; 65535us; 65535us; 16422us; 65535us; 16423us; 65535us; 16424us; 65535us; 16425us; 65535us; 16426us; 65535us; 16427us; 65535us; 65535us; 16429us; |]
let _fsyacc_reductions ()  =    [| 
# 321 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 330 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startProg));
# 339 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                   _1 
                   )
# 25 "Parser.fsy"
                 : Program));
# 350 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Parser.fsy"
                                                  (_2, _3) 
                   )
# 28 "Parser.fsy"
                 : Program));
# 362 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                                         DVar(_2) 
                   )
# 31 "Parser.fsy"
                 : 'BasicDecl));
# 373 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                                         DArray(_2,_4) 
                   )
# 32 "Parser.fsy"
                 : 'BasicDecl));
# 385 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                                         DEmpty 
                   )
# 33 "Parser.fsy"
                 : 'BasicDecl));
# 395 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BasicDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                                   _1 
                   )
# 36 "Parser.fsy"
                 : 'Decl));
# 406 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BasicDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                   DSeq(_3,_1)
                   )
# 37 "Parser.fsy"
                 : 'Decl));
# 418 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BasicStmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                         _1 
                   )
# 40 "Parser.fsy"
                 : 'Stmt));
# 429 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'BasicStmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                         Seq(_2,_1) 
                   )
# 41 "Parser.fsy"
                 : 'Stmt));
# 441 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                                                                      VarAssign(_1, _3) 
                   )
# 44 "Parser.fsy"
                 : 'BasicStmt));
# 453 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                                                                      ArrayAssign(_1,_3,_6) 
                   )
# 45 "Parser.fsy"
                 : 'BasicStmt));
# 466 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                                                                      Continue 
                   )
# 46 "Parser.fsy"
                 : 'BasicStmt));
# 476 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                                                                      Break 
                   )
# 47 "Parser.fsy"
                 : 'BasicStmt));
# 486 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                                                                      Read(_2) 
                   )
# 48 "Parser.fsy"
                 : 'BasicStmt));
# 497 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                                                                      ArrayRead(_2,_4) 
                   )
# 49 "Parser.fsy"
                 : 'BasicStmt));
# 509 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                                                                      Write(_2) 
                   )
# 50 "Parser.fsy"
                 : 'BasicStmt));
# 520 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bexpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'BasicStmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                                                      If(_3,_6) 
                   )
# 51 "Parser.fsy"
                 : 'BasicStmt));
# 532 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bexpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'BasicStmt)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'BasicStmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                                                                      IfElse(_3,_6,_10) 
                   )
# 52 "Parser.fsy"
                 : 'BasicStmt));
# 545 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bexpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'BasicStmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                                                                      While(_3,_6) 
                   )
# 53 "Parser.fsy"
                 : 'BasicStmt));
# 557 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                                                                      Block(_2,_3) 
                   )
# 54 "Parser.fsy"
                 : 'BasicStmt));
# 569 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                              Add(_1,_3) 
                   )
# 57 "Parser.fsy"
                 : 'Aexpr));
# 581 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                              Sub(_1,_3) 
                   )
# 58 "Parser.fsy"
                 : 'Aexpr));
# 593 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                              _1 
                   )
# 59 "Parser.fsy"
                 : 'Aexpr));
# 604 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                             Mult(_1,_3) 
                   )
# 62 "Parser.fsy"
                 : 'Aexpr1));
# 616 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                             Div(_1,_3) 
                   )
# 63 "Parser.fsy"
                 : 'Aexpr1));
# 628 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                             _1 
                   )
# 64 "Parser.fsy"
                 : 'Aexpr1));
# 639 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                       _2 
                   )
# 67 "Parser.fsy"
                 : 'Aexpr2));
# 650 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                       _1 
                   )
# 68 "Parser.fsy"
                 : 'Aexpr2));
# 661 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                       Array(_1,_3) 
                   )
# 71 "Parser.fsy"
                 : 'Aexpr3));
# 673 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                       Var(_1) 
                   )
# 72 "Parser.fsy"
                 : 'Aexpr3));
# 684 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                       V(_1) 
                   )
# 73 "Parser.fsy"
                 : 'Aexpr3));
# 695 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bexpr1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                           And(_3, _1)
                   )
# 76 "Parser.fsy"
                 : 'Bexpr));
# 707 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bexpr1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                           Or(_3, _1) 
                   )
# 77 "Parser.fsy"
                 : 'Bexpr));
# 719 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bexpr1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                           _1 
                   )
# 78 "Parser.fsy"
                 : 'Bexpr));
# 730 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                              BV(true) 
                   )
# 81 "Parser.fsy"
                 : 'Bexpr1));
# 740 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                              BV(false) 
                   )
# 82 "Parser.fsy"
                 : 'Bexpr1));
# 750 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                              Great(_1,_3) 
                   )
# 83 "Parser.fsy"
                 : 'Bexpr1));
# 762 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                              GreatEq(_1,_3) 
                   )
# 84 "Parser.fsy"
                 : 'Bexpr1));
# 774 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                              Less(_1,_3) 
                   )
# 85 "Parser.fsy"
                 : 'Bexpr1));
# 786 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                              LessEq(_1,_3) 
                   )
# 86 "Parser.fsy"
                 : 'Bexpr1));
# 798 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                              Eq(_1,_3) 
                   )
# 87 "Parser.fsy"
                 : 'Bexpr1));
# 810 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                              NotEq(_1,_3) 
                   )
# 88 "Parser.fsy"
                 : 'Bexpr1));
# 822 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                              Neg(_2) 
                   )
# 89 "Parser.fsy"
                 : 'Bexpr1));
# 833 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                              _2 
                   )
# 90 "Parser.fsy"
                 : 'Bexpr1));
|]
# 845 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 37;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let Prog lexer lexbuf : Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
