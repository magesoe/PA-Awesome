{
module Lexer
open System
open System.Text
open Parser
open Microsoft.FSharp.Text.Lexing

let keyword s =
    match s with
    | "int"  -> INT
    | "if"   -> IF
    | "else" -> ELSE
    | "while" -> WHILE
    | "continue" -> CONTINUE
    | "break" -> BREAK
    | "write" -> WRITE
    | "read" -> READ
    | "true" -> TRUE
    | "false" -> FALSE
    | _ -> ID s;;

let log (id : string) (str : string) = Console.WriteLine(id + " " + str)
let lexeme = LexBuffer<_>.LexemeString
}

let digit = ['0'-'9']
let whitespace = [' ' '\t']
let newline = ('\n' | '\r' '\n')
let char = ['A'-'Z' 'a'-'z']
let integer = digit+
let identifier = char(char|digit)*

rule tokenize =
    parse
    | whitespace  { log "whitespace" (lexeme lexbuf); tokenize lexbuf }
    | newline     { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }
    | integer     { log "integer" (lexeme lexbuf); Int32.Parse(lexeme lexbuf) |> INTEGER }
    | "("         { log "lparen" (lexeme lexbuf); LPAREN }
    | ")"         { log "rparen" (lexeme lexbuf); RPAREN }
    | "["         { log "lbracket" (lexeme lexbuf);LBRACKET }
    | "]"         { log "rbracket" (lexeme lexbuf);RBRACKET }
    | "{"         { log "lbrace" (lexeme lexbuf);LBRACE }
    | "}"         { log "rbrace" (lexeme lexbuf); RBRACE }
    | ";"         { log "semi" (lexeme lexbuf); SEMI }
    | "&"         { log "and" (lexeme lexbuf); AND }
    | "|"         { log "or" (lexeme lexbuf); OR }
    | ":="        { log "assign" (lexeme lexbuf); ASSIGN }
    | "!"         { log "not" (lexeme lexbuf); NOT }
    | ">"         { log "gt" (lexeme lexbuf); GT }
    | ">="        { log "ge" (lexeme lexbuf); GE }
    | "<"         { log "lt" (lexeme lexbuf); LT }
    | "<="        { log "le" (lexeme lexbuf); LE }
    | "=="        { log "eq" (lexeme lexbuf); EQ }
    | "!="        { log "neq" (lexeme lexbuf); NEQ }
    | "+"         { log "plus" (lexeme lexbuf); PLUS }
    | "-"         { log "minus" (lexeme lexbuf); MINUS }
    | "*"         { log "mul" (lexeme lexbuf);MUL }
    | "/"         { log "div" (lexeme lexbuf); DIV }
    | identifier  { log "identifier" (lexeme lexbuf); keyword(lexeme lexbuf) }
    | eof         { EOF }
