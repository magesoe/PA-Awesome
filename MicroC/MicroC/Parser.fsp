%{
open Domain
%}

%token <int> INTEGER
%token <string> ID

%token LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET
%token AND OR
%token ASSIGN SEMI
%token GT GE LT LE EQ NEQ NOT
%token PLUS MINUS MUL DIV
%token IF ELSE WHILE CONTINUE BREAK WRITE READ
%token TRUE FALSE INT
%token EOF

%start Main
%%

Main:
   Prog EOF { $1 }

Prog:
   LBRACE Decl Stmt RBRACE { Program($2, $3) }

BasicDecl:
   INT ID SEMI                           { DVar($2) }
 | INT ID LBRACKET INTEGER RBRACKET SEMI { DArray($2) }
 |                                       { DEmpty }

Decl:
   BasicDecl (Decl)? { DSeq($1,$2) }

Stmt:
   BasicStmt BasicStmt { Seq($1,$2) }
 | BasicStmt           { $1 }

BasicStmt
   ID ASSIGN Aexpr SEMI                                              { VarAssign($1, $3) }
 | ID LBRACKET INTEGER RBRACKET ASSIGN Aexpr SEMI                    { ArrayAssign($1,$6) }
 | CONTINUE                                                          { Continue }
 | BREAK                                                             { Break }
 | READ ID SEMI                                                      { Read($2) }
 | READ ID LBRACKET INTEGER RBRACKET SEMI                            { Read($2) }
 | WRITE ID SEMI                                                     { Write($2) }
 | WRITE ID LBRACKET INTEGER RBRACKET SEMI                           { Write($2) }
 | IF LPAREN Bexpr RPAREN LBRACE Stmt RBRACE                         { If($3,$6) }
 | IF LPAREN Bexpr PRAREN LBRACE Stmt BBRACE ELSE LBRACE Stmt RBRACE { IfElse($3,$6,$10) }
 | WHILE LPAREN Bexpr RPAREN LBRACE Stmt RBRACE                      { While($3,$6) }
 | LBRACE Decl Stmt RBRACE                                           { Block($2,$3) }

Aexpr:
   Aexpr1 PLUS Aexpr1  { Add($1,$3) }
 | Aexpr1 MINUS Aexpr1 { Sub($1,$3) }
 | Aexpr1              { $1 }

Aexpr1:
   Aexpr2 MUL Aexpr2  { Mult($1,$3) }
 | Aexpr2 DIV Aexpr2  { Div($1,$3) }
 | Aexpr2             { $1 }

Aexpr2:
   MINUS Aexpr3 { $2 }
 | Aexpr3       { $1 }

Aexpr3:
   ID LBRACKET INTEGER RBRACKET { Array($1) }
 | ID                           { Var($1) }
 | Integer                      { V($1) }

Bexpr:
   Bexpr1 OR Bexpr1 { Or($1, $3) }
 | Bexpr1           { $1 }

Bexpr1:
   Bexpr2 AND Bexpr2 { And($1,$3) }
 | Bexpr2            { $1 }

Bexpr2:
   Aexpr GT Aexpr      { Great($1,$3) }
 | Aexpr GE Aexpr      { GreatEq($1,$3) }
 | Aexpr LT Aexpr      { Less($1,$3) }
 | Aexpr LE Aexpr      { LessEq($1,$3) }
 | Aexpr EQ Aexpr      { Eq($1,$3) }
 | Aexpr NEQ Aexpr     { NotEq($1,$3) }
 | NOT Bexpr           { Neg($2) }
 | TRUE                { V(true) }
 | FALSE               { V(false) }
 | LPAREN Bexpr RPAREN { $2 }
