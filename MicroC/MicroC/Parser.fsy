%{
open Domain
%}

%token <int> INTEGER
%token <string> ID

%token LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET
%token AND OR
%token ASSIGN SEMI
%token GT GE LT LE EQ NEQ NOT
%token PLUS MINUS MUL DIV
%token IF ELSE WHILE CONTINUE BREAK WRITE READ
%token TRUE FALSE INT
%token EOF

%left AND OR GT GE LT LE EQ NEQ PLUS MINUS MUL DIV SEMI ASSIGN
%nonassoc NOT LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET IF ELSE WHILE CONTINUE BREAK WRITE READ

%start Main Prog
%type <Program> Main Prog
%%

Main:
   Prog EOF { $1 }

Prog:
   LBRACE Decl Stmt RBRACE { ($2, $3) }

BasicDecl:
   INT ID SEMI                         { DVar($2) }
 | INT ID LBRACKET Aexpr RBRACKET SEMI { DArray($2,$4) }

Decl:
   BasicDecl      { $1 }
 | Decl BasicDecl { DSeq($2,$1)}

Stmt:
   BasicStmt      { $1 }
 | Stmt BasicStmt { Seq($2,$1) }

BasicStmt:
   ID ASSIGN Aexpr SEMI                                                        { VarAssign($1, $3) }
 | ID LBRACKET Aexpr RBRACKET ASSIGN Aexpr SEMI                                { ArrayAssign($1,$3,$6) }
 | CONTINUE                                                                    { Continue }
 | BREAK                                                                       { Break }
 | READ ID SEMI                                                                { Read($2) }
 | READ ID LBRACKET Aexpr RBRACKET SEMI                                        { ArrayRead($2,$4) }
 | WRITE Aexpr SEMI                                                            { Write($2) }
 | IF LPAREN Bexpr RPAREN LBRACE BasicStmt RBRACE                              { If($3,$6) }
 | IF LPAREN Bexpr RPAREN LBRACE BasicStmt RBRACE ELSE LBRACE BasicStmt RBRACE { IfElse($3,$6,$10) }
 | WHILE LPAREN Bexpr RPAREN LBRACE BasicStmt RBRACE                           { While($3,$6) }
 | LBRACE Decl Stmt RBRACE                                                     { Block($2,$3) }

Aexpr:
   Aexpr1 PLUS Aexpr   { Add($1,$3) }
 | Aexpr1 MINUS Aexpr  { Sub($1,$3) }
 | Aexpr1              { $1 }

Aexpr1:
   Aexpr2 MUL Aexpr1  { Mult($1,$3) }
 | Aexpr2 DIV Aexpr1  { Div($1,$3) }
 | Aexpr2             { $1 }

Aexpr2:
   MINUS Aexpr3 { $2 }
 | Aexpr3       { $1 }

Aexpr3:
   ID LBRACKET Aexpr RBRACKET   { Array($1,$3) }
 | ID                           { Var($1) }
 | INTEGER                      { V($1) }

Bexpr:
   Bexpr AND Bexpr1 { And($3, $1)}
 | Bexpr OR Bexpr1  { Or($3, $1) } 
 | Bexpr1           { $1 } 

Bexpr1:
   TRUE                { BV(true) }
 | FALSE               { BV(false) }
 | Aexpr GT Aexpr      { Great($1,$3) }
 | Aexpr GE Aexpr      { GreatEq($1,$3) }
 | Aexpr LT Aexpr      { Less($1,$3) }
 | Aexpr LE Aexpr      { LessEq($1,$3) }
 | Aexpr EQ Aexpr      { Eq($1,$3) }
 | Aexpr NEQ Aexpr     { NotEq($1,$3) }
 | NOT Bexpr           { Neg($2) } 
 | LPAREN Bexpr RPAREN { $2 }
