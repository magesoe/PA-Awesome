%{
open Domain
%}

%token <int> INTEGER
%token <string> ID

%token LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET
%token AND OR
%token ASSIGN SEMI
%token GT GE LT LE EQ NEQ NOT
%token PLUS MINUS MUL DIV
%token IF ELSE WHILE CONTINUE BREAK WRITE READ
%token TRUE FALSE INT
%token EOF

%start Main Prog
%type <Program> Main Prog
%%

Main:
   Prog EOF { $1 }

Prog:
   LBRACE Decl Stmt RBRACE { ($2, $3) }

BasicDecl:
   INT ID SEMI                         { DVar($2) }
 | INT ID LBRACKET Aexpr RBRACKET SEMI { DArray($2,$4) }
 |                                     { DEmpty }

Decl:
   BasicDecl      { $1 }
 | BasicDecl Decl { DSeq($1,$2) }

Stmt:
   BasicStmt      { $1 }
 | BasicStmt Stmt { Seq($1,$2) }

BasicStmt:
   ID ASSIGN Aexpr SEMI                                              { VarAssign($1, $3) }
 | ID LBRACKET Aexpr RBRACKET ASSIGN Aexpr SEMI                      { ArrayAssign($1,$3,$6) }
 | CONTINUE                                                          { Continue }
 | BREAK                                                             { Break }
 | READ ID SEMI                                                      { Read($2) }
 | READ ID LBRACKET Aexpr RBRACKET SEMI                              { ArrayRead($2,$4) }
 | WRITE Aexpr SEMI                                                  { Write($2) }
 | WRITE Aexpr LBRACKET INTEGER RBRACKET SEMI                        { Write($2) }
 | IF LPAREN Bexpr RPAREN LBRACE Stmt RBRACE                         { If($3,$6) }
 | IF LPAREN Bexpr RPAREN LBRACE Stmt RBRACE ELSE LBRACE Stmt RBRACE { IfElse($3,$6,$10) }
 | WHILE LPAREN Bexpr RPAREN LBRACE Stmt RBRACE                      { While($3,$6) }
 | LBRACE Decl Stmt RBRACE                                           { Block($2,$3) }

Aexpr:
   Aexpr1 PLUS Aexpr1  { Add($1,$3) }
 | Aexpr1 MINUS Aexpr1 { Sub($1,$3) }
 | Aexpr1              { $1 }

Aexpr1:
   Aexpr2 MUL Aexpr2  { Mult($1,$3) }
 | Aexpr2 DIV Aexpr2  { Div($1,$3) }
 | Aexpr2             { $1 }

Aexpr2:
   MINUS Aexpr3 { $2 }
 | Aexpr3       { $1 }

Aexpr3:
   ID LBRACKET Aexpr RBRACKET   { Array($1,$3) }
 | ID                           { Var($1) }
 | INTEGER                      { V($1) }

Bexpr:
   Bexpr1 OR Bexpr1 { Or($1, $3) }
 | Bexpr1           { $1 }

Bexpr1:
   Bexpr2 AND Bexpr2 { And($1,$3) }
 | Bexpr2            { $1 }

Bexpr2:
   Aexpr GT Aexpr      { Great($1,$3) }
 | Aexpr GE Aexpr      { GreatEq($1,$3) }
 | Aexpr LT Aexpr      { Less($1,$3) }
 | Aexpr LE Aexpr      { LessEq($1,$3) }
 | Aexpr EQ Aexpr      { Eq($1,$3) }
 | Aexpr NEQ Aexpr     { NotEq($1,$3) }
 | NOT Bexpr           { Neg($2) }
 | TRUE                { BV(true) }
 | FALSE               { BV(false) }
 | LPAREN Bexpr RPAREN { $2 }
