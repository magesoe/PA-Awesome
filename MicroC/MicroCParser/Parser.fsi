// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | TRUE
  | FALSE
  | INT
  | IF
  | ELSE
  | WHILE
  | CONTINUE
  | BREAK
  | WRITE
  | READ
  | PLUS
  | MINUS
  | MUL
  | DIV
  | GT
  | GE
  | LT
  | LE
  | EQ
  | NEQ
  | NOT
  | ASSIGN
  | SEMI
  | AND
  | OR
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | ID of (string)
  | INTEGER of (int)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_INT
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_CONTINUE
    | TOKEN_BREAK
    | TOKEN_WRITE
    | TOKEN_READ
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_NOT
    | TOKEN_ASSIGN
    | TOKEN_SEMI
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_ID
    | TOKEN_INTEGER
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM__startProg
    | NONTERM_Main
    | NONTERM_Prog
    | NONTERM_BasicDecl
    | NONTERM_Decl
    | NONTERM_Stmt
    | NONTERM_BasicStmt
    | NONTERM_Aexpr
    | NONTERM_Aexpr1
    | NONTERM_Aexpr2
    | NONTERM_Aexpr3
    | NONTERM_Bexpr
    | NONTERM_Bexpr1
    | NONTERM_Bexpr2
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Main : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Program) 
val Prog : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Program) 
